// Copyright 2021-2024 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from rosflight_msgs/msg/GNSS.msg - do not modify

#pragma once

// UE
#include "CoreMinimal.h"

// ROS
#include "rosflight_msgs/msg/gnss.h"

// rclUE
#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

// Generated Msg/Srv/Action(can be empty)
#include "Msgs/ROS2Header.h"


// Generated
#include "ROS2GNSS.generated.h"

USTRUCT(Blueprintable)
struct UNREALROSFLIGHT_API FROSGNSS
{
	GENERATED_BODY()

public:
		static constexpr uint8 GNSS_FIX_TYPE_NO_FIX = 0;
	static constexpr uint8 GNSS_FIX_TYPE_DEAD_RECKONING_ONLY = 1;
	static constexpr uint8 GNSS_FIX_TYPE_2D_FIX = 2;
	static constexpr uint8 GNSS_FIX_TYPE_3D_FIX = 3;
	static constexpr uint8 GNSS_FIX_TYPE_GNSS_PLUS_DEAD_RECKONING = 4;
	static constexpr uint8 GNSS_FIX_TYPE_TIME_FIX_ONLY = 5;


	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FROSHeader Header;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	uint8 FixType = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	uint8 NumSat = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	double Lat = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	double Lon = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float Alt = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float HorizontalAccuracy = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float VerticalAccuracy = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float VelN = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float VelE = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float VelD = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float SpeedAccuracy = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int64 GnssUnixSeconds = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int GnssUnixNanos = 0;

	

	FROSGNSS()
	{
		
	}

	void SetFromROS2(const rosflight_msgs__msg__GNSS& in_ros_data)
	{
    	Header.SetFromROS2(in_ros_data.header);

		FixType = in_ros_data.fix_type;

		NumSat = in_ros_data.num_sat;

		Lat = in_ros_data.lat;

		Lon = in_ros_data.lon;

		Alt = in_ros_data.alt;

		HorizontalAccuracy = in_ros_data.horizontal_accuracy;

		VerticalAccuracy = in_ros_data.vertical_accuracy;

		VelN = in_ros_data.vel_n;

		VelE = in_ros_data.vel_e;

		VelD = in_ros_data.vel_d;

		SpeedAccuracy = in_ros_data.speed_accuracy;

		GnssUnixSeconds = in_ros_data.gnss_unix_seconds;

		GnssUnixNanos = in_ros_data.gnss_unix_nanos;

		
	}

	void SetROS2(rosflight_msgs__msg__GNSS& out_ros_data) const
	{
    	Header.SetROS2(out_ros_data.header);

		out_ros_data.fix_type = FixType;

		out_ros_data.num_sat = NumSat;

		out_ros_data.lat = Lat;

		out_ros_data.lon = Lon;

		out_ros_data.alt = Alt;

		out_ros_data.horizontal_accuracy = HorizontalAccuracy;

		out_ros_data.vertical_accuracy = VerticalAccuracy;

		out_ros_data.vel_n = VelN;

		out_ros_data.vel_e = VelE;

		out_ros_data.vel_d = VelD;

		out_ros_data.speed_accuracy = SpeedAccuracy;

		out_ros_data.gnss_unix_seconds = GnssUnixSeconds;

		out_ros_data.gnss_unix_nanos = GnssUnixNanos;

		
	}
};

UCLASS()
class UNREALROSFLIGHT_API UROS2GNSSMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSGNSS& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSGNSS& Output) const;
	
	virtual void* Get() override;

	UFUNCTION(BlueprintCallable)
	static uint8 CONST_GNSS_FIX_TYPE_NO_FIX()
	{
		return FROSGNSS::GNSS_FIX_TYPE_NO_FIX;
	}
	UFUNCTION(BlueprintCallable)
	static uint8 CONST_GNSS_FIX_TYPE_DEAD_RECKONING_ONLY()
	{
		return FROSGNSS::GNSS_FIX_TYPE_DEAD_RECKONING_ONLY;
	}
	UFUNCTION(BlueprintCallable)
	static uint8 CONST_GNSS_FIX_TYPE_2D_FIX()
	{
		return FROSGNSS::GNSS_FIX_TYPE_2D_FIX;
	}
	UFUNCTION(BlueprintCallable)
	static uint8 CONST_GNSS_FIX_TYPE_3D_FIX()
	{
		return FROSGNSS::GNSS_FIX_TYPE_3D_FIX;
	}
	UFUNCTION(BlueprintCallable)
	static uint8 CONST_GNSS_FIX_TYPE_GNSS_PLUS_DEAD_RECKONING()
	{
		return FROSGNSS::GNSS_FIX_TYPE_GNSS_PLUS_DEAD_RECKONING;
	}
	UFUNCTION(BlueprintCallable)
	static uint8 CONST_GNSS_FIX_TYPE_TIME_FIX_ONLY()
	{
		return FROSGNSS::GNSS_FIX_TYPE_TIME_FIX_ONLY;
	}
	


private:
	virtual FString MsgToString() const override;

	rosflight_msgs__msg__GNSS gnss_msg;
};